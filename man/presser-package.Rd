% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/presser-package.R
\docType{package}
\name{presser-package}
\alias{presser}
\alias{presser-package}
\title{presser: Lightweight Web Server for Testing}
\description{
Create a web app that makes it easier to test web clients
  without using the internet. It includes a web app framework with path
  matching and parameters and templates. Can parse various 'HTTP' request
  bodies. Can send 'JSON' data or files from the disk. Includes a web app
  that implements the <https://httpbin.org> web service.
}
\details{
The presser package uses vocabulary that is standard for web apps,
especially those developed with Express.js, but not necessarily well
known to all R package developers.

\strong{Apps} Central to this package are \emph{apps} that are fake web services,
fake web APIs. When you define them they are not started, you start them
either by using the \verb{$listen()} method, or by launching them in a new
process. See \code{?presser::new_app}. Until you start it an app is no more
than its specifications, and can be shared/saved to disk.

\strong{Routes} As explained in \href{https://expressjs.com/en/guide/routing.html}{Express.js docs}, “Routing refers to
how an application’s endpoints (URIs) respond to client requests.”. Each
route therefore is defined by a combination of HTTP methods (\code{get()},
\code{post()}, etc. or \code{all()} for any HTTP method) and a path definition (a
string, parameterized string or regular expression).

\strong{Middleware} As explained in \href{https://expressjs.com/en/guide/writing-middleware.html}{Express.js docs},
“Middleware functions are functions that have access to the request
object (req), the response object (res), and the next function in the
application’s request-response cycle.” They are in the middle between
request and response. So middleware functions are what you use to parse
the request (query, body), to produce a response and to change data in
the app’s local environment. There are built-in middleware functions in
the package, and you can add your own.

\strong{Handler stack} This is a fancy word to mention both routes and
middleware functions. Together they define \emph{what} your web service does
(middleware) \emph{for what request} (routes).
}
\seealso{
Useful links:
\itemize{
  \item \url{https://r-lib.github.io/presser}
  \item \url{https://github.com/r-lib/presser#readme}
  \item Report bugs at \url{https://github.com/r-lib/presser/issues}
}

}
\author{
\strong{Maintainer}: Gábor Csárdi \email{csardi.gabor@gmail.com}

Other contributors:
\itemize{
  \item  RStudio, Pbc. [copyright holder]
  \item  Civetweb contributors (see inst/credits/ciwetweb.md) [contributor]
  \item  Redoc contributors (see inst/credits/redoc.md) [contributor]
  \item L. Peter Deutsch (src/md5.h) [contributor]
  \item Martin Purschke (src/md5.h) [contributor]
  \item  Aladdin Enterprises (src/md5.h) [copyright holder]
}

}
\keyword{internal}
